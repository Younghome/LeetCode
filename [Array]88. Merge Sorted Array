//4ms
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int last1 = m - 1;
        int last2 = n - 1;
        for (int i = nums1.length - 1; i >= 0; i --){
            if (last1 >= 0 && last2 >=0){
                if (nums1[last1] >= nums2[last2])
                    nums1[i] = nums1[last1--];
                else
                    nums1[i] = nums2[last2--];
            }
            else if (last1 < 0)
                nums1[i] = nums2[last2--];
        }
    }
}
//3ms
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int last1 = m - 1;
        int last2 = n - 1;
        for (int i = nums1.length - 1; i >= 0; i --){
            if(last1 < 0)
                nums1[i] = nums2[last2--];
            else if(last2 < 0)
                break;
            else if (nums1[last1] >= nums2[last2])
                nums1[i] = nums1[last1--];
            else
                nums1[i] = nums2[last2--];
            // if (last1 >= 0 && last2 >=0){
            //     if (nums1[last1] >= nums2[last2])
            //         nums1[i] = nums1[last1--];
            //     else
            //         nums1[i] = nums2[last2--];
            // }
            // else if (last1 < 0)
            //     nums1[i] = nums2[last2--];
        }
    }
}
