//需考虑左右边界为0的特殊情况
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int i = 0;
        int count = 0;
        while(i < flowerbed.length){
            if(flowerbed[i] == 0 && (i == 0 || flowerbed[i-1] == 0) && (i == flowerbed.length - 1 || flowerbed[i+1] == 0)){
                flowerbed[i++] = 1;
                count++;
            }
            if (count>=n)
                return true;
            i++;
        }
        return false;
    }
}

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int gap = 0;
        int res = 0;
        int len = flowerbed.length;
        if (len == 1)
            return (n == 0) || (n==1 && flowerbed[0]==0);
        if (flowerbed[0] == 0 && flowerbed[1] == 0){
            res += 1;
            flowerbed[0] = 1;
        }
        for(int i = 1; i < len-1 ; i++) {
           if(flowerbed[i-1] == 0 && flowerbed[i] ==0 && flowerbed[i+1] ==0) {
               res++;
               flowerbed[i] =1;
           }
        }
        if (flowerbed[len - 1] == 0 && flowerbed[len - 2] == 0){
            res += 1;
            flowerbed[len -1] = 1;
        }
        return res >= n;
    }
}
