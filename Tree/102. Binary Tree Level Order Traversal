Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //2ms,29.55%
 //非递归
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null)
            return res;
        List<Integer> line = new ArrayList<>();
        ArrayList<TreeNode> queue = new ArrayList<>();
        ArrayList<TreeNode> newqueue = new ArrayList<>();
        queue.add(root);
        while (!queue.isEmpty()){
            TreeNode tmp = queue.remove(0);
            line.add(tmp.val);
            if (tmp.left!=null)
                newqueue.add(tmp.left);
            if (tmp.right!=null)
                newqueue.add(tmp.right);
            if (queue.isEmpty()){
                res.add(line);
                List<Integer> newLine = new ArrayList<>();
                line = newLine;
                ArrayList<TreeNode> temp = new ArrayList<>();
                temp = queue;
                queue = newqueue;
                newqueue = temp;
                newqueue.clear();
                //line.clear();
            }
        }
        return res;
    }
}
//递归
//1ms,89.12%
class solution{
    public List<List<Integer>> levelOrder(TreeNode root){
        List<List<Integer>> res = new ArrayList<>();
        int level = 0;
        helper(root,res,level);
        return res;
    }
    public void helper(TreeNode root,List<List<Integer>> res,int level){
        if (root==null)
            return;
        if (res.size() == level)
            res.add(new ArrayList<>());
        res.get(level).add(root.val);
        helper(root.left,res,level+1);
        helper(root.right,res,level+1);
    }
}
