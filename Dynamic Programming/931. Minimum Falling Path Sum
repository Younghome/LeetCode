Given a square array of integers A, we want the minimum sum of a falling path through A.

A falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column 
that is different from the previous row's column by at most one.

//7ms,66.2%
class Solution {
    public int minFallingPathSum(int[][] A) {
        int[][] min = new int[A.length][A.length];
        for (int i = 0; i < A.length; i++){
            for (int j = 0; j < A.length; j++){
                if (i == 0){
                    min[i][j] = A[i][j];
                    continue;
                }
                else if (j == 0){
                    min[i][j] = Math.min(min[i-1][j],min[i-1][j+1]) + A[i][j];
                }
                else if (j == A.length - 1){
                    min[i][j] = Math.min(min[i-1][j],min[i-1][j-1]) + A[i][j];
                }
                else{
                     min[i][j] = Math.min(Math.min(min[i-1][j],min[i-1][j-1]),min[i-1][j+1]) + A[i][j];
                }
            }
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < A.length; i++){
            res = Math.min(res,min[A.length-1][i]);
        }
        
        return res;
    }
}
