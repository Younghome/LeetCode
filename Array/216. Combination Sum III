Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination
should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

//1ms,75.11%
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> com = new ArrayList<>();
        find(res,com,k,n,1,0);
        return res;
    }
    public void find(List<List<Integer>> res, List<Integer> com, int k, int n, int i,int sum){
        if (sum > n)
            return;
        if (com.size() == k){
            if (sum == n)
                res.add(new ArrayList<Integer>(com));
            return;
        }
        if (i>9)
            return;
        com.add(i);
        find(res,com,k,n,i+1,sum+i);
        com.remove(com.size()-1);
        find(res,com,k,n,i+1,sum);
    }
}
