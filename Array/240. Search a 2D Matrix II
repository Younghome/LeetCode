Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.
//15ms,18.5%
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0)
            return false;
        int row = matrix.length-1;
        int col = matrix[0].length-1;
        while(row>0){
            if(matrix[row][0]>target)
                row--;
            if(matrix[row][0]==target)
                return true;
            if(matrix[row][0]<target)
                break;
        }
        while(col>0){
            if(matrix[0][col]>target)
                col--;
            if(matrix[0][col]==target)
                return true;
            if(matrix[0][col]<target)
                break;
        }
        for (int i = 0; i <= row; i++){
            for (int j = 0; j <= col; j++){
                if(matrix[i][j]==target)
                    return true;
            }
        }
        return false;
    }
}
//10ms,98.61%
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0)
            return false;
        int r = matrix.length-1;
        int c = 0;
        while(r>=0 && c < matrix[0].length){
            if(matrix[r][c]>target)
                r--;
            else if(matrix[r][c]<target)
                c++;
            else
                return true;
        }
        return false;
    }
}
