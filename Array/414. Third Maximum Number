Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum 
number. The time complexity must be in O(n).
\*15ms,12.77%
* 刚开始使用了max = Integer.MIN_VALUE，测试时发现输入的nums中有可能存在Integer.MIN_VALUE的值
* 因此将max改为Integer对象
*/
class Solution {
    public int thirdMax(int[] nums) {
        Integer max1 = null;
        Integer max2 = null;
        Integer max3 = null;
        Set<Integer> set = new HashSet<>();
        for (int i:nums){
            set.add(i);
        }
        Iterator<Integer> iter = set.iterator();
        while(iter.hasNext()){
            int i = iter.next();
            if(max1 == null || i > max1){
                max3 = max2;
                max2 = max1;
                max1 = i;
            }
            else if(max2 == null || i > max2){
                max3 = max2;
                max2 = i;
            }
            else if(max3 == null || i > max3){
                max3 = i;
            }
        }
        return max3 == null? max1:max3;
    }
}
//2ms,98.19%
//使用long，long的最小值小于int的最小值
class Solution {
    public int thirdMax(int[] nums) {
        long[] max = new long[3];
        Arrays.fill(max, Long.MIN_VALUE);
        for ( int i : nums ){
            if ( i > max[0] ){
                max[2] = max[1];
                max[1] = max[0]; 
                max[0] = i;
            }
            else if ( i > max[1] ){
                if ( i == max[0] ) continue;
                max[2] = max[1];
                max[1] = i;
            }
            else if ( i > max[2] && i != max[1] )
                max[2] = i;
        }
        if ( max[2] != Long.MIN_VALUE ) return (int)max[2];
        return (int)max[0];
    }
}
