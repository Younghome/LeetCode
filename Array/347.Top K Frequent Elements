Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]

//93ms,5.5%
//先用HashMap记录每个数字出现的次数，再用优先队列存放次数最多的前k个，最后将优先队列中的k个值放入List中，注意，得用Collections.reverse()方法将其
//翻转
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer> count = new HashMap<>();
        for (int num:nums){
            count.put(num,count.getOrDefault(num,0)+1);
        }
        
        PriorityQueue<Integer> heap = new PriorityQueue<>((n1,n2) -> count.get(n1)  - count.get(n2));
        
        for (int n:count.keySet()){
            heap.add(n);
            if (heap.size()>k)
                heap.poll();
        }
        List<Integer> res = new ArrayList<>();
        while (!heap.isEmpty()){
            res.add(heap.poll());
        }
        Collections.reverse(res);
        return res;
    }
}
