Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
//遍历一遍nums，每一轮都计算一次当前数组的所在的增序列的长度，即分别向前向后遍历来计算
//25ms,40.12%
class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums.length == 0)
            return 0;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++){
            int sub = 1;
            int j = i-1;
            int flag = nums[i];
            while(j>=0){
                if (nums[j]<flag){
                    sub++;
                    flag = nums[j];
                }
                j--;
            }
            j = i+1;
            flag = nums[i];
            while(j<nums.length){
                if (nums[j]>flag){
                    sub++;
                    flag = nums[j];
                }
                j++;
            }
            max = Math.max(max,sub);
        }
        return max;
    }
}
//24ms,47.5%
//动态规划，每个dp[i]记录当前位置元素所在的前i个集合的最长子序列长度
class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums.length == 0)
            return 0;
        int max = 1;
        int[] dp = new int[nums.length];
        dp[0] = 1;
        for (int i = 1; i < nums.length; i++){
            dp[i] = 1;
            for (int j = i-1; j >= 0; j--){
                if (nums[i]>nums[j]){
                    dp[i] = Math.max(dp[i],dp[j]+1);
                }
            }
            max = Math.max(max,dp[i]);
        }
        return max;
    }
}
