Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent 
different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU 
could finish one task or just be idle.

However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that 
CPU are doing different tasks or just be idle.

You need to return the least number of intervals the CPU will take to finish all the given tasks.

 

Example:

Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: A -> B -> idle -> A -> B -> idle -> A -> B.

//思路：先将所有任务按照需要执行次数排序，然后按顺序执行，当到达最大间隙n时，重新排序任务执行次数，然后在顺序执行，若任务个数不够n时，CPU用idle时隙来
//填充至n，直到所有任务都完成为止，记录时隙个数
//21ms,46.18%
class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] map = new int[26];
        for (char c:tasks){
            map[c-'A']++;
        }
        int time = 0;
        Arrays.sort(map);
        while (map[25] > 0){
            int i = 0;
            while (i<=n){
                if (map[25]==0)
                    break;
                if (i<26 &&map[25-i]>0)
                    map[25-i]--;
                time++;
                i++;
            }
            Arrays.sort(map);
        }
        return time;
    }
}
//79ms,24.36%
class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] map = new int[26];
        for (char c:tasks){
            map[c-'A']++;
        }
        PriorityQueue<Integer> queue = new PriorityQueue<>(26,Collections.reverseOrder());
        for (int f : map){
            if(f>0)
                queue.add(f);
        }
        int time = 0;
        while (!queue.isEmpty()){
            int i = 0;
            List<Integer> temp = new ArrayList<>();
            while(i<=n){
                if (!queue.isEmpty()){
                    if (queue.peek() > 1)
                        temp.add(queue.poll() - 1);
                    else
                        queue.poll();
                }
                time++;
                if (queue.isEmpty() && temp.size() == 0)
                    break;
                i++;                
            }
            for (int l : temp)
                queue.add(l);
        }
        return time;
    }
}
