Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that 
the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container
contains the most water.

Note: You may not slant the container and n is at least 2.
//299ms,18.1%
//利用穷搜的方法，找到最大值
class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        for (int i = 0; i < height.length; i++){
            for (int j = i; j < height.length; j++){
                if ((j-i)*Math.min(height[i],height[j]) > max)
                    max = (j-i)*Math.min(height[i],height[j]);
            }
        }
    return max;
    }
}
//6ms,65.16%
//左右两边同时向内缩进寻找
class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        int i = 0, j = height.length - 1;
        while( i < j ){
            int newCon = (j-i)*Math.min(height[i],height[j]);
            max = Math.max(max,newCon);
            int prei = i;
            int prej = j;
            if (height[i]<= height[j]){
                while ( i < j && height[i] <= height[prei] ){
                    i++;
                }
            }
            else{
                while ( i < j && height[j] <= height[prej]){
                    j--;
                }
            }
        }
    return max;
    }
}

class Solution {
    public int maxArea(int[] height) {
        int max = 0;
        int i = 0, j = height.length - 1;
        while( i < j ){
            if (height[i]<= height[j]){
                max = Math.max(max,(j-i)*height[i]);
                    i++;
            }
            else{
                max = Math.max(max,(j-i)*height[j]);
                    j--;
            }
        }
    return max;
    }
}
