You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 
2D matrix and do the rotation.

Example 1:

Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
//2ms,99.1%
//时间复杂度O(n2），空间复杂度O(1)
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for(int i = 0; i < n / 2 + n % 2; i++){
            for (int j = 0; j < n / 2; j++){
                int[] tmp = new int[4];
                int row = i;
                int col = j;
                for(int k = 0; k < 4; k++){
                    tmp[k] = matrix[row][col];
                    int x = row;
                    row = col;
                    col = n-1-x;
                }
                for (int k = 0; k < 4; k++){
                    matrix[row][col] = tmp[(k+3)%4];
                    int x = row;
                    row = col;
                    col = n-1-x;
                }
            }
        }
    }
}
