Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations
in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
//17ms,29.63%
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        helper(candidates,target,res,list,0,0);
        return res;
    }
    public void helper(int[] candidates,int target,List<List<Integer>> res, List<Integer> list, int sum, int start){
        if (sum > target)
            return;
        if (sum == target){
            res.add(new ArrayList<>(list));
            return;
        }
        for (int i = start; i < candidates.length; i++){
            list.add(candidates[i]);
            sum += candidates[i];
            helper(candidates,target,res,list,sum,i);
            sum = sum - list.remove(list.size()-1);
        }
    }
}
